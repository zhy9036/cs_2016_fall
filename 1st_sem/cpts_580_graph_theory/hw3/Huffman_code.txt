/******************************************
Yang Zhang
11529139
CS 580 HW3
*******************************************/ 
 /*****************************************
 HuffmanNode class
 *****************************************/
 
 public class HuffmanNode implements Comparable<HuffmanNode> {  
 public double freq;   
 public char data;   
 public HuffmanNode zero;
 public HuffmanNode one;
	
 public HuffmanNode(char ascii, double frequency) {      
    this(ascii, frequency, null, null);
 }  
	
 public HuffmanNode(char ascii, double frequency , HuffmanNode left, HuffmanNode right) {
    this.freq = frequency;
    this.data = ascii;
    this.zero = left;       
    this.one = right;
 }
		
 public HuffmanNode(char ascii){
 	this(ascii, -1, null, null);
 }

 public HuffmanNode(char ascii, HuffmanNode left, HuffmanNode right){
 	this(ascii, -1, null, null);
 }
		
		//post: compare the frequency and get the large one
  public int compareTo(HuffmanNode other) {
         return (this.freq - other.freq)>0? 1: -1;
      }   
  }
  
 /*****************************************
 HuffmanNode class
 *****************************************/
 
 import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.TreeMap;

public class HuffmanTree{

   private HuffmanNode overallRoot;
   
   public HuffmanTree(Map<Character, Double> counts){

      Queue<HuffmanNode> pq = new PriorityQueue<HuffmanNode>();
      for(char chars: counts.keySet()){
         pq.add(new HuffmanNode(chars,counts.get(chars)));
      }
      while(pq.size() != 1){
         HuffmanNode temp0 = pq.remove();
         HuffmanNode temp1 = pq.remove();
         //System.out.println(temp0.freq + " : " + temp1.freq);
         pq.add(new HuffmanNode(' ',temp0.freq+temp1.freq,temp0,temp1));
      }
      overallRoot = pq.remove();
   }
   
   public Map<Character, String> createEncodings(){
      HuffmanNode cur = overallRoot;
      Map<Character, String> encoding = mapHelper(cur, new TreeMap<Character, String>(),"");
      return encoding;
   }
   
   private Map<Character, String> mapHelper(HuffmanNode cur, Map<Character, String> map,String temp){
      if(cur.zero == null && cur.one == null){
         map.put(cur.data, temp);
      }else{
         map = mapHelper(cur.zero, map, temp+"0");
         map = mapHelper(cur.one, map, temp+"1");
      }
      return map;
   }
}
 
 /*****************************************
 Testing code
 *****************************************/
 
 import java.util.HashMap;
import java.util.Map;

public class TestMain {

	public static void main(String[] args) {

		char[] chars = new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'};
		double[] freq = new double[]{.2, .05, .1, .1, .18, .15, .15, .07};
		double[] freq1 = new double[]{.1, .15, .2, .17, .13, .15, .05, .05};
		double[] freq2 = new double[]{.15, .1, .15, .12, .08, .25, .05, .1};
		Map<Character, Double> counts = new HashMap();
		Map<Character, Double> counts1 = new HashMap();
		Map<Character, Double> counts2 = new HashMap();
		for(int i =0; i< chars.length; i++){
			counts.put(chars[i], freq[i]);
			counts1.put(chars[i], freq[i]);
			counts2.put(chars[i], freq[i]);
		}
		
		HuffmanTree ht = new HuffmanTree(counts);
		HuffmanTree ht1 = new HuffmanTree(counts1);
		HuffmanTree ht2 = new HuffmanTree(counts2);
		Map<Character, String> codes = ht.createEncodings();
		Map<Character, String> codes1 = ht1.createEncodings();
		Map<Character, String> codes2 = ht2.createEncodings();
		
		System.out.println("exercise 3.5.4");
		for(char c : codes.keySet()){
			System.out.println(c + " : " + codes.get(c));
		}
		
		System.out.println("\nexercise 3.5.5");
		for(char c : codes1.keySet()){
			System.out.println(c + " : " + codes1.get(c));
		}
		
		System.out.println("\nexercise 3.5.6");
		for(char c : codes2.keySet()){
			System.out.println(c + " : " + codes2.get(c));
		}
		

	}
}