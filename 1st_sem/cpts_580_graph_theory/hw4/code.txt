public class MainTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int graph[][] = new int[][] {{0, 2, 0, 6, 0},
            {2, 0, 3, 8, 5},
            {0, 3, 0, 0, 7},
            {6, 8, 0, 0, 9},
            {0, 5, 7, 9, 0},
           };
           
        int[][] test1 = new int[][] {
        	{0,6,9,0,0,0,0,0},
        	{6,0,5,8,0,0,7,0},
        	{9,5,0,4,8,7,0,0},
        	{0,8,4,0,0,4,5,0},
        	{0,0,8,0,0,9,0,4},
        	{0,0,7,4,9,0,3,10},
        	{0,7,0,5,0,3,0,6},
        	{0,0,0,0,4,10,6,0}
        };
        
        int[][] test2 = new int[][] {
        	{0,7,9,5,0,0,0,0},
        	{7,0,0,2,0,0,4,0},
        	{9,0,0,4,6,6,0,0},
        	{5,2,4,0,0,8,5,0},
        	{0,0,6,0,0,1,0,7},
        	{0,0,6,8,1,0,3,4},
        	{0,4,0,5,0,3,0,2},
        	{0,0,0,0,7,4,2,0}
        	
        };
        
        int[][] test3 = new int[][] {
        	{0,16,0,9,13,0,6,0,0},
        	{16,0,7,5,7,0,0,0,0},
        	{0,7,0,8,8,6,0,0,0},
        	{9,5,8,0,0,14,7,0,13},
        	{13,7,8,0,0,10,0,0,0},
        	{0,0,6,14,10,0,0,5,12},
        	{6,0,0,7,0,0,0,11,10},
        	{0,0,0,0,0,5,11,0,9},
        	{0,0,0,13,0,12,10,9,0},
        	
        };
        
        int[][] test4 = new int[][] {
        	{0 ,6 ,0 ,9 ,8 ,0 ,12,0 ,0},
        	{6 ,0 ,7 ,5 ,9 ,0 ,0 ,0 ,0},
        	{0 ,7 ,0 ,8 ,11,6 ,0 ,14,0},
        	{9 ,5 ,8 ,0 ,8 ,0 ,7 ,10,0},
        	{8 ,9 ,11,8 ,0 ,16,0 ,0 ,0},
        	{0 ,0 ,6 ,0 ,16,0 ,0 ,10,5},
        	{12,0 ,0 ,7 ,0 ,0 ,0 ,8 ,0},
        	{0 ,0 ,14,10,0 ,10,8 ,0 ,7},
        	{0 ,0 ,0 ,0 ,0 ,5 ,0 ,7 ,0}
        	
        };
        PrimBuilder pb = new PrimBuilder();
        pb.buildPrimMST(test1);
        pb.buildPrimMST(test2);
        pb.buildPrimMST(test3);
        pb.buildPrimMST(test4);
	}

}















public class PrimBuilder {
	
	
	public PrimBuilder(){
		
	}
	
	private int nextEdge(int[] v, boolean[] checkSet){
		int min = Integer.MAX_VALUE;
		int index = -1;
		for(int i = 0; i < v.length; i++){
			if(!checkSet[i] && v[i] < min){
				min = v[i];
				index = i;
			}
		}
		
		return index;
	}
	
	public void buildPrimMST(int[][] graph){
		//System.out.println("SIZE: " + graph.length);
		int[] parent = new int[graph.length];
		int[] v = new int[graph.length];
		boolean[] checkList = new boolean[graph.length];
		
		for(int i = 0; i < graph.length; i++){
			v[i] = Integer.MAX_VALUE;
			checkList[i] = false;
		}
		
		v[0] = 0;
		parent[0] = -1;
		for(int i = 0; i < graph.length; i++)
			parent[i] = -1;
		
		for(int i = 0; i<graph.length-1; i++){
			int minVertex = nextEdge(v,checkList);
			checkList[minVertex] = true;
			
			for(int j = 0; j < graph.length; j++){
				if(graph[minVertex][j]!=0 && checkList[j] == false
						&& graph[minVertex][j] < v[j]){
					parent[j] = minVertex;
					//if(j == 5)
						//System.out.println(graph[minVertex][j]);
					
					v[j] = graph[minVertex][j];
					//if(j == 4)
						//System.out.println((char)(minVertex+'a'));
				}
			}
		}
		
		printPrim(parent, graph);
	}
	
	private void printPrim(int[] parent, int[][] graph){
		//System.out.println(graph[4][1]);
		System.out.println("Edge  Weight");
		for(int i = 1; i < graph.length; i++){
			int p = parent[i];
			 System.out.println((char)(p == 0 ? 's' :parent[i]+'a'-1)+" - "+ ((char)(i+'a'-1))+"    "+
                     graph[i][parent[i]]);
		}
		
		System.out.println("\n");
	}

}